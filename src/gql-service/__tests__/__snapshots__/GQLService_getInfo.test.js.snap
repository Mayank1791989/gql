// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query fragmentSpread fragment defined in other file 1`] = `
Object {
  "contents": Array [
    "fragment Profile on Player {
                id
              }",
  ],
}
`;

exports[`Query fragmentSpread fragment defined in same document 1`] = `
Object {
  "contents": Array [
    "fragment Profile on Player ",
  ],
}
`;

exports[`Query fragmentSpread fragment defined in same file 1`] = `
Object {
  "contents": Array [
    "fragment Profile on Player ",
  ],
}
`;

exports[`Query meta field __schema 1`] = `
Object {
  "contents": Array [
    "# Access the current type schema of this server.
  __schema: __Schema!",
    "# A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all
# available types and directives on the server, as well as the entry points for
# query, mutation, and subscription operations.
type __Schema {
  # A list of all types supported by this server.
  types: [__Type!]!

  # The type that query operations will be rooted at.
  queryType: __Type!

  # If this server supports mutation, the type that mutation operations will be rooted at.
  mutationType: __Type

  # If this server support subscription, the type that subscription operations will be rooted at.
  subscriptionType: __Type

  # A list of all directives supported by this server.
  directives: [__Directive!]!
}",
  ],
}
`;

exports[`Query meta field __type 1`] = `
Object {
  "contents": Array [
    "# Request the type information of a single type.
  __type(name: String!): __Type",
    "# The fundamental unit of any GraphQL Schema is the type. There are many kinds of
# types in GraphQL as represented by the \`__TypeKind\` enum.
#
# Depending on the kind of a type, certain fields describe information about that
# type. Scalar types provide no information beyond a name and description, while
# Enum types provide their values. Object and Interface types provide the fields
# they describe. Abstract types, Union and Interface, provide the Object types
# possible at runtime. List and NonNull types compose other types.
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields: [__InputValue!]
  ofType: __Type
}",
  ],
}
`;

exports[`Schema: getDef works in schema files 1`] = `
Object {
  "contents": Array [
    "type Viewer {
          name: string
        }",
  ],
}
`;
