// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query [Bug] should work if position is first character mutation keyword 1`] = `
Array [
  Object {
    "description": "Mutation contains all allowed mutations",
    "text": "mutation",
    "type": "Mutation",
  },
]
`;

exports[`Query directives args 1`] = `
Array [
  Object {
    "description": "Marks this fragment spread as being deferrable such that it loads after other portions of the view.",
    "text": "deferrable",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a connection field as containing nodes without 'id' fields. This is used to silence the warning when diffing connections.",
    "text": "isConnectionWithoutNodeID",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment spread which should be unmasked if provided false",
    "text": "mask",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment as intended for pattern matching (as opposed to fetching). Used in Classic only.",
    "text": "pattern",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment as being backed by a GraphQLList.",
    "text": "plural",
    "type": "Boolean",
  },
  Object {
    "description": "Selectively pass variables down into a fragment. Only used in Classic.",
    "text": "variables",
    "type": "[String!]",
  },
]
`;

exports[`Query directives args: value 1`] = `
Array [
  Object {
    "description": "Not true.",
    "text": "false",
    "type": "Boolean",
  },
  Object {
    "description": "Not false.",
    "text": "true",
    "type": "Boolean",
  },
]
`;

exports[`Query directives directives 1`] = `
Array [
  Object {
    "description": "some custom directive",
    "text": "customDirective",
    "type": "Directive",
  },
  Object {
    "description": "Directs the executor to include this field or fragment only when the \`if\` argument is true.",
    "text": "include",
    "type": "Directive",
  },
  Object {
    "description": "Directs the executor to skip this field or fragment when the \`if\` argument is true.",
    "text": "skip",
    "type": "Directive",
  },
]
`;

exports[`Query directives directives: include relay directives 1`] = `
Array [
  Object {
    "description": "some custom directive",
    "text": "customDirective",
    "type": "Directive",
  },
  Object {
    "description": "",
    "text": "relay",
    "type": "Directive",
  },
]
`;

exports[`Query fragmentSpread show fragments defined in other files 1`] = `
Array [
  Object {
    "description": "fragment ProfileC on Player",
    "text": "ProfileC",
    "type": "Player",
  },
]
`;

exports[`Query fragmentSpread show fragments defined in same document 1`] = `
Array [
  Object {
    "description": "fragment ProfileA on Player",
    "text": "ProfileA",
    "type": "Player",
  },
]
`;

exports[`Query fragmentSpread show fragments defined in same file 1`] = `
Array [
  Object {
    "description": "fragment ProfileB on Player",
    "text": "ProfileB",
    "type": "Player",
  },
]
`;

exports[`Query mutation field args 1`] = `
Array [
  Object {
    "description": "",
    "text": "input",
    "type": "PlayerCreateInput!",
  },
]
`;

exports[`Query subscription field args 1`] = `
Array [
  Object {
    "description": "",
    "text": "input",
    "type": "LikeStorySubscriptionInput",
  },
]
`;

exports[`Schema type show \`implements\` && \`{\` after typename 1`] = `
Array [
  Object {
    "text": "{",
  },
  Object {
    "text": "implements",
    "type": "Implements",
  },
]
`;

exports[`Schema: autocomplete works in schema files 1`] = `
Array [
  Object {
    "description": "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
    "text": "__DirectiveLocation",
    "type": "Enum",
  },
  Object {
    "description": "An enum describing what kind of type a given \`__Type\` is.",
    "text": "__TypeKind",
    "type": "Enum",
  },
  Object {
    "description": undefined,
    "text": "Query",
    "type": "Object",
  },
  Object {
    "description": undefined,
    "text": "Viewer",
    "type": "Object",
  },
  Object {
    "description": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
    "text": "__Directive",
    "type": "Object",
  },
  Object {
    "description": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
    "text": "__EnumValue",
    "type": "Object",
  },
  Object {
    "description": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
    "text": "__Field",
    "type": "Object",
  },
  Object {
    "description": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
    "text": "__InputValue",
    "type": "Object",
  },
  Object {
    "description": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
    "text": "__Schema",
    "type": "Object",
  },
  Object {
    "description": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the \`__TypeKind\` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
    "text": "__Type",
    "type": "Object",
  },
  Object {
    "description": "The \`Boolean\` scalar type represents \`true\` or \`false\`.",
    "text": "Boolean",
    "type": "Scalar",
  },
  Object {
    "description": "The \`Float\` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ",
    "text": "Float",
    "type": "Scalar",
  },
  Object {
    "description": "The \`ID\` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \`\\"4\\"\`) or integer (such as \`4\`) input value will be accepted as an ID.",
    "text": "ID",
    "type": "Scalar",
  },
  Object {
    "description": "The \`Int\` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
    "text": "Int",
    "type": "Scalar",
  },
  Object {
    "description": "The \`String\` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
    "text": "String",
    "type": "Scalar",
  },
]
`;
