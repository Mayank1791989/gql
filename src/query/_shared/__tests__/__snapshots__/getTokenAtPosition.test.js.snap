// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should able to parse Relay.QL queries with interpolation multi line 1`] = `
Object {
  "end": 82,
  "prevChar": "a",
  "start": 78,
  "state": Object {
    "jsInlineFragment": null,
    "kind": "Field",
    "level": 0,
    "levels": Array [
      NaN,
    ],
    "name": "name",
    "needsAdvance": true,
    "needsSeperator": false,
    "prevState": Object {
      "jsInlineFragment": null,
      "kind": "Selection",
      "level": 0,
      "levels": Array [
        NaN,
      ],
      "name": null,
      "needsAdvance": false,
      "needsSeperator": false,
      "prevState": Object {
        "jsInlineFragment": null,
        "kind": "SelectionSet",
        "level": 0,
        "levels": Array [
          NaN,
        ],
        "name": null,
        "needsAdvance": false,
        "needsSeperator": false,
        "prevState": Object {
          "kind": "FragmentDefinition",
          "level": 0,
          "levels": Array [
            NaN,
          ],
          "name": "Name",
          "needsAdvance": false,
          "needsSeperator": false,
          "prevState": Object {
            "kind": "Definition",
            "level": 0,
            "name": null,
            "needsSeperator": false,
            "prevState": Object {
              "kind": "Document",
              "level": 0,
              "name": null,
              "needsSeperator": false,
              "prevState": Object {
                "kind": null,
                "level": 0,
                "name": null,
                "needsSeperator": false,
                "prevState": null,
                "rule": null,
                "step": 0,
                "type": null,
              },
              "rule": Array [
                Object {
                  "isList": true,
                  "ofRule": "Definition",
                  "separator": undefined,
                },
              ],
              "step": 0,
              "type": null,
            },
            "rule": [Function],
            "step": 0,
            "type": null,
          },
          "rule": Array [
            Object {
              "match": [Function],
              "style": "keyword",
            },
            Object {
              "ofRule": Object {
                "match": [Function],
                "style": "def",
                "update": [Function],
              },
            },
            "TypeCondition",
            Object {
              "isList": true,
              "ofRule": "Directive",
              "separator": undefined,
            },
            "SelectionSet",
          ],
          "step": 4,
          "type": "Test",
        },
        "rule": Array [
          Object {
            "match": [Function],
            "style": "punctuation",
          },
          Object {
            "isList": true,
            "ofRule": "Selection",
            "separator": undefined,
          },
          Object {
            "match": [Function],
            "style": "punctuation",
          },
        ],
        "step": 1,
        "type": null,
      },
      "rule": [Function],
      "step": 0,
      "type": null,
    },
    "rule": Array [
      Object {
        "match": [Function],
        "style": "property",
        "update": [Function],
      },
      Object {
        "ofRule": "Arguments",
      },
      Object {
        "isList": true,
        "ofRule": "Directive",
        "separator": undefined,
      },
      Object {
        "ofRule": "SelectionSet",
      },
    ],
    "step": 0,
    "type": null,
  },
  "string": "name",
  "style": "property",
}
`;

exports[`should able to parse Relay.QL queries with interpolation single line 1`] = `
Object {
  "end": 66,
  "prevChar": "a",
  "start": 62,
  "state": Object {
    "jsInlineFragment": null,
    "kind": "Field",
    "level": 0,
    "levels": Array [
      NaN,
    ],
    "name": "name",
    "needsAdvance": true,
    "needsSeperator": false,
    "prevState": Object {
      "jsInlineFragment": null,
      "kind": "Selection",
      "level": 0,
      "levels": Array [
        NaN,
      ],
      "name": null,
      "needsAdvance": false,
      "needsSeperator": false,
      "prevState": Object {
        "jsInlineFragment": null,
        "kind": "SelectionSet",
        "level": 0,
        "levels": Array [
          NaN,
        ],
        "name": null,
        "needsAdvance": false,
        "needsSeperator": false,
        "prevState": Object {
          "kind": "FragmentDefinition",
          "level": 0,
          "levels": Array [
            NaN,
          ],
          "name": "Name",
          "needsAdvance": false,
          "needsSeperator": false,
          "prevState": Object {
            "kind": "Definition",
            "level": 0,
            "name": null,
            "needsSeperator": false,
            "prevState": Object {
              "kind": "Document",
              "level": 0,
              "name": null,
              "needsSeperator": false,
              "prevState": Object {
                "kind": null,
                "level": 0,
                "name": null,
                "needsSeperator": false,
                "prevState": null,
                "rule": null,
                "step": 0,
                "type": null,
              },
              "rule": Array [
                Object {
                  "isList": true,
                  "ofRule": "Definition",
                  "separator": undefined,
                },
              ],
              "step": 0,
              "type": null,
            },
            "rule": [Function],
            "step": 0,
            "type": null,
          },
          "rule": Array [
            Object {
              "match": [Function],
              "style": "keyword",
            },
            Object {
              "ofRule": Object {
                "match": [Function],
                "style": "def",
                "update": [Function],
              },
            },
            "TypeCondition",
            Object {
              "isList": true,
              "ofRule": "Directive",
              "separator": undefined,
            },
            "SelectionSet",
          ],
          "step": 4,
          "type": "Test",
        },
        "rule": Array [
          Object {
            "match": [Function],
            "style": "punctuation",
          },
          Object {
            "isList": true,
            "ofRule": "Selection",
            "separator": undefined,
          },
          Object {
            "match": [Function],
            "style": "punctuation",
          },
        ],
        "step": 1,
        "type": null,
      },
      "rule": [Function],
      "step": 0,
      "type": null,
    },
    "rule": Array [
      Object {
        "match": [Function],
        "style": "property",
        "update": [Function],
      },
      Object {
        "ofRule": "Arguments",
      },
      Object {
        "isList": true,
        "ofRule": "Directive",
        "separator": undefined,
      },
      Object {
        "ofRule": "SelectionSet",
      },
    ],
    "step": 0,
    "type": null,
  },
  "string": "name",
  "style": "property",
}
`;

exports[`should able to parse Relay.QL queries with interpolation with curly braces inside interpolation 1`] = `
Object {
  "end": 115,
  "prevChar": "a",
  "start": 111,
  "state": Object {
    "jsInlineFragment": null,
    "kind": "Field",
    "level": 0,
    "levels": Array [
      NaN,
    ],
    "name": "name",
    "needsAdvance": true,
    "needsSeperator": false,
    "prevState": Object {
      "jsInlineFragment": null,
      "kind": "Selection",
      "level": 0,
      "levels": Array [
        NaN,
      ],
      "name": null,
      "needsAdvance": false,
      "needsSeperator": false,
      "prevState": Object {
        "jsInlineFragment": null,
        "kind": "SelectionSet",
        "level": 0,
        "levels": Array [
          NaN,
        ],
        "name": null,
        "needsAdvance": false,
        "needsSeperator": false,
        "prevState": Object {
          "kind": "FragmentDefinition",
          "level": 0,
          "levels": Array [
            NaN,
          ],
          "name": "Name",
          "needsAdvance": false,
          "needsSeperator": false,
          "prevState": Object {
            "kind": "Definition",
            "level": 0,
            "name": null,
            "needsSeperator": false,
            "prevState": Object {
              "kind": "Document",
              "level": 0,
              "name": null,
              "needsSeperator": false,
              "prevState": Object {
                "kind": null,
                "level": 0,
                "name": null,
                "needsSeperator": false,
                "prevState": null,
                "rule": null,
                "step": 0,
                "type": null,
              },
              "rule": Array [
                Object {
                  "isList": true,
                  "ofRule": "Definition",
                  "separator": undefined,
                },
              ],
              "step": 0,
              "type": null,
            },
            "rule": [Function],
            "step": 0,
            "type": null,
          },
          "rule": Array [
            Object {
              "match": [Function],
              "style": "keyword",
            },
            Object {
              "ofRule": Object {
                "match": [Function],
                "style": "def",
                "update": [Function],
              },
            },
            "TypeCondition",
            Object {
              "isList": true,
              "ofRule": "Directive",
              "separator": undefined,
            },
            "SelectionSet",
          ],
          "step": 4,
          "type": "Test",
        },
        "rule": Array [
          Object {
            "match": [Function],
            "style": "punctuation",
          },
          Object {
            "isList": true,
            "ofRule": "Selection",
            "separator": undefined,
          },
          Object {
            "match": [Function],
            "style": "punctuation",
          },
        ],
        "step": 1,
        "type": null,
      },
      "rule": [Function],
      "step": 0,
      "type": null,
    },
    "rule": Array [
      Object {
        "match": [Function],
        "style": "property",
        "update": [Function],
      },
      Object {
        "ofRule": "Arguments",
      },
      Object {
        "isList": true,
        "ofRule": "Directive",
        "separator": undefined,
      },
      Object {
        "ofRule": "SelectionSet",
      },
    ],
    "step": 0,
    "type": null,
  },
  "string": "name",
  "style": "property",
}
`;

exports[`should able to parse Relay.QL tags 1`] = `
Object {
  "end": 59,
  "prevChar": "i",
  "start": 54,
  "state": Object {
    "kind": "Field",
    "level": 0,
    "levels": Array [
      NaN,
    ],
    "name": "image",
    "needsAdvance": true,
    "needsSeperator": false,
    "prevState": Object {
      "kind": "Selection",
      "level": 0,
      "levels": Array [
        NaN,
      ],
      "name": null,
      "needsAdvance": false,
      "needsSeperator": false,
      "prevState": Object {
        "kind": "SelectionSet",
        "level": 0,
        "levels": Array [
          NaN,
        ],
        "name": null,
        "needsAdvance": false,
        "needsSeperator": false,
        "prevState": Object {
          "kind": "FragmentDefinition",
          "level": 0,
          "levels": Array [
            NaN,
          ],
          "name": null,
          "needsAdvance": false,
          "needsSeperator": false,
          "prevState": Object {
            "kind": "Definition",
            "level": 0,
            "name": null,
            "needsSeperator": false,
            "prevState": Object {
              "kind": "Document",
              "level": 0,
              "name": null,
              "needsSeperator": false,
              "prevState": Object {
                "kind": null,
                "level": 0,
                "name": null,
                "needsSeperator": false,
                "prevState": null,
                "rule": null,
                "step": 0,
                "type": null,
              },
              "rule": Array [
                Object {
                  "isList": true,
                  "ofRule": "Definition",
                  "separator": undefined,
                },
              ],
              "step": 0,
              "type": null,
            },
            "rule": [Function],
            "step": 0,
            "type": null,
          },
          "rule": Array [
            Object {
              "match": [Function],
              "style": "keyword",
            },
            Object {
              "ofRule": Object {
                "match": [Function],
                "style": "def",
                "update": [Function],
              },
            },
            "TypeCondition",
            Object {
              "isList": true,
              "ofRule": "Directive",
              "separator": undefined,
            },
            "SelectionSet",
          ],
          "step": 4,
          "type": "Test",
        },
        "rule": Array [
          Object {
            "match": [Function],
            "style": "punctuation",
          },
          Object {
            "isList": true,
            "ofRule": "Selection",
            "separator": undefined,
          },
          Object {
            "match": [Function],
            "style": "punctuation",
          },
        ],
        "step": 1,
        "type": null,
      },
      "rule": [Function],
      "step": 0,
      "type": null,
    },
    "rule": Array [
      Object {
        "match": [Function],
        "style": "property",
        "update": [Function],
      },
      Object {
        "ofRule": "Arguments",
      },
      Object {
        "isList": true,
        "ofRule": "Directive",
        "separator": undefined,
      },
      Object {
        "ofRule": "SelectionSet",
      },
    ],
    "step": 0,
    "type": null,
  },
  "string": "image",
  "style": "property",
}
`;

exports[`should able to parse multiple Relay.QL tags in single file 1`] = `
Object {
  "end": 95,
  "prevChar": "T",
  "start": 90,
  "state": Object {
    "kind": "NamedType",
    "level": 0,
    "name": "Test2",
    "needsAdvance": true,
    "needsSeperator": false,
    "prevState": Object {
      "kind": "TypeCondition",
      "level": 0,
      "name": null,
      "needsAdvance": false,
      "needsSeperator": false,
      "prevState": Object {
        "kind": "FragmentDefinition",
        "level": 0,
        "name": null,
        "needsAdvance": false,
        "needsSeperator": false,
        "prevState": Object {
          "kind": "Definition",
          "level": 0,
          "name": null,
          "needsSeperator": false,
          "prevState": Object {
            "kind": "Document",
            "level": 0,
            "name": null,
            "needsSeperator": false,
            "prevState": Object {
              "kind": null,
              "level": 0,
              "name": null,
              "needsSeperator": false,
              "prevState": null,
              "rule": null,
              "step": 0,
              "type": null,
            },
            "rule": Array [
              Object {
                "isList": true,
                "ofRule": "Definition",
                "separator": undefined,
              },
            ],
            "step": 0,
            "type": null,
          },
          "rule": [Function],
          "step": 0,
          "type": null,
        },
        "rule": Array [
          Object {
            "match": [Function],
            "style": "keyword",
          },
          Object {
            "ofRule": Object {
              "match": [Function],
              "style": "def",
              "update": [Function],
            },
          },
          "TypeCondition",
          Object {
            "isList": true,
            "ofRule": "Directive",
            "separator": undefined,
          },
          "SelectionSet",
        ],
        "step": 2,
        "type": "Test2",
      },
      "rule": Array [
        Object {
          "match": [Function],
          "style": "keyword",
        },
        "NamedType",
      ],
      "step": 1,
      "type": null,
    },
    "rule": Array [
      Object {
        "match": [Function],
        "style": "atom",
        "update": [Function],
      },
    ],
    "step": 0,
    "type": null,
  },
  "string": "Test2",
  "style": "atom",
}
`;
