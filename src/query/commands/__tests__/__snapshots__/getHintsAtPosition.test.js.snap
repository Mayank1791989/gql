// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Values Object value keys 1`] = `
Array [
  Object {
    "description": "",
    "text": "id",
    "type": "ID!",
  },
  Object {
    "description": "",
    "text": "name",
    "type": "String!",
  },
  Object {
    "description": "",
    "text": "role",
    "type": "Role!",
  },
]
`;

exports[`directives args 1`] = `
Array [
  Object {
    "description": "Marks a connection field as containing nodes without \`id\` fields. This is used to silence the warning when diffing connections.",
    "text": "isConnectionWithoutNodeID",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment as static. A static fragment will share the same identity regardless of how many times the expression is evaluated.",
    "text": "isStaticFragment",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment as intended for pattern matching (as opposed to fetching).",
    "text": "pattern",
    "type": "Boolean",
  },
  Object {
    "description": "Marks a fragment as being backed by a GraphQLList",
    "text": "plural",
    "type": "Boolean",
  },
  Object {
    "description": "Selectively pass variables down into a fragment.",
    "text": "variables",
    "type": "[String]",
  },
]
`;

exports[`directives args: value 1`] = `
Array [
  Object {
    "description": "Not false.",
    "text": "true",
    "type": "Boolean",
  },
  Object {
    "description": "Not true.",
    "text": "false",
    "type": "Boolean",
  },
]
`;

exports[`directives directives 1`] = `
Array [
  Object {
    "description": "some custom directive",
    "text": "customDirective",
  },
  Object {
    "description": "Directs the executor to skip this field or fragment when the \`if\` argument is true.",
    "text": "skip",
  },
  Object {
    "description": "Directs the executor to include this field or fragment only when the \`if\` argument is true.",
    "text": "include",
  },
]
`;

exports[`directives directives: include relay directives 1`] = `
Array [
  Object {
    "description": "some custom directive",
    "text": "customDirective",
  },
  Object {
    "description": "The @relay directive.",
    "text": "relay",
  },
]
`;

exports[`mutation field args 1`] = `
Array [
  Object {
    "description": "",
    "text": "input",
    "type": "PlayerCreateInput!",
  },
]
`;

exports[`show meta field __typename in abstract types interface type 1`] = `
Array [
  Object {
    "description": "",
    "text": "id",
    "type": "ID!",
  },
  Object {
    "description": "The name of the current Object type at runtime.",
    "text": "__typename",
    "type": "String!",
  },
]
`;

exports[`show meta field __typename in abstract types union type 1`] = `
Array [
  Object {
    "description": "The name of the current Object type at runtime.",
    "text": "__typename",
    "type": "String!",
  },
]
`;
