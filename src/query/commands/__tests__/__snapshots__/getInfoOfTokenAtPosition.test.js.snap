// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`directives args 1`] = `
Object {
  "contents": Array [
    "# Included when true.
if: Boolean!",
    "# The \`Boolean\` scalar type represents \`true\` or \`false\`.",
  ],
}
`;

exports[`directives core: args 1`] = `
Object {
  "contents": Array [
    "# Included when true.
if: Boolean!",
    "# The \`Boolean\` scalar type represents \`true\` or \`false\`.",
  ],
}
`;

exports[`directives core: name 1`] = `
Object {
  "contents": Array [
    "# Directs the executor to include this field or fragment only when the \`if\` argument is true.
directive @include(
  # Included when true.
  if: Boolean!
)
  on FIELD
   | FRAGMENT_SPREAD
   | INLINE_FRAGMENT",
  ],
}
`;

exports[`directives name info 1`] = `
Object {
  "contents": Array [
    "# Directs the executor to include this field or fragment only when the \`if\` argument is true.
directive @include(
  # Included when true.
  if: Boolean!
)
  on FIELD
   | FRAGMENT_SPREAD
   | INLINE_FRAGMENT",
  ],
}
`;

exports[`directives user defined: args 1`] = `
Object {
  "contents": Array [
    "# description for arg
if: Boolean!",
    "# The \`Boolean\` scalar type represents \`true\` or \`false\`.",
  ],
}
`;

exports[`directives user defined: name 1`] = `
Object {
  "contents": Array [
    "# some custom directive
directive @customDirective(
  # description for arg
  if: Boolean!
)
  on FIELD
   | FRAGMENT_DEFINITION",
  ],
}
`;

exports[`fragments field arguments 1`] = `
Object {
  "contents": Array [
    "(argument) size: Int!",
    "# The \`Int\` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ",
  ],
}
`;

exports[`fragments field: Should Include description, fieldDefn and output Type 1`] = `
Object {
  "contents": Array [
    "(field) friend: Node!",
    "interface Node {
  id: ID!
}",
  ],
}
`;

exports[`fragments on Type 1`] = `
Object {
  "contents": Array [
    "type Player implements Node {
  id: ID!
  name: String!
  image(size: Int!): String!
}",
  ],
}
`;

exports[`meta field __schema 1`] = `
Object {
  "contents": Array [
    "# Access the current type schema of this server.
(meta-field) __schema: __Schema!",
    "# A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all
# available types and directives on the server, as well as the entry points for
# query, mutation, and subscription operations.
type __Schema {
  # A list of all types supported by this server.
  types: [__Type!]!

  # The type that query operations will be rooted at.
  queryType: __Type!

  # If this server supports mutation, the type that mutation operations will be rooted at.
  mutationType: __Type

  # If this server support subscription, the type that subscription operations will be rooted at.
  subscriptionType: __Type

  # A list of all directives supported by this server.
  directives: [__Directive!]!
}",
  ],
}
`;

exports[`meta field __type 1`] = `
Object {
  "contents": Array [
    "# Request the type information of a single type.
(meta-field) __type(name: String!): __Type",
    "# The fundamental unit of any GraphQL Schema is the type. There are many kinds of
# types in GraphQL as represented by the \`__TypeKind\` enum.
#
# Depending on the kind of a type, certain fields describe information about that
# type. Scalar types provide no information beyond a name and description, while
# Enum types provide their values. Object and Interface types provide the fields
# they describe. Abstract types, Union and Interface, provide the Object types
# possible at runtime. List and NonNull types compose other types.
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields: [__InputValue!]
  ofType: __Type
}",
  ],
}
`;

exports[`meta field __typename when inside Interface Type 1`] = `
Object {
  "contents": Array [
    "# The name of the current Object type at runtime.
(meta-field) __typename: String!",
    "# The \`String\` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar String",
  ],
}
`;

exports[`meta field __typename when inside Object Type 1`] = `
Object {
  "contents": Array [
    "# The name of the current Object type at runtime.
(meta-field) __typename: String!",
    "# The \`String\` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar String",
  ],
}
`;

exports[`meta field __typename when inside Union Type 1`] = `
Object {
  "contents": Array [
    "# The name of the current Object type at runtime.
(meta-field) __typename: String!",
    "# The \`String\` scalar type represents textual data, represented as UTF-8 character
# sequences. The String type is most often used by GraphQL to represent free-form
# human-readable text.
scalar String",
  ],
}
`;

exports[`mutations field: Include both input and output type 1`] = `
Object {
  "contents": Array [
    "# Player Create contains all allowed mutations
(field) PlayerCreate(input: PlayerCreateInput!): PlayerCreatePayload",
    "input PlayerCreateInput {
  id: ID!
  name: String!
  role: Role!
}",
    "type PlayerCreatePayload {
  player: Player!
}",
  ],
}
`;

exports[`mutations input object fields 1`] = `
Object {
  "contents": Array [
    "(field) role: Role!",
    "enum Role {
  roleA
  roleB
  roleC
}",
  ],
}
`;

exports[`mutations type: include description 1`] = `
Object {
  "contents": Array [
    "# Mutation contains all allowed mutations
type Mutation {
  # Player Create contains all allowed mutations
  PlayerCreate(input: PlayerCreateInput!): PlayerCreatePayload
}",
  ],
}
`;

exports[`query field 1`] = `
Object {
  "contents": Array [
    "(field) viewer: Viewer!",
    "type Viewer {
  me: Player!
  xme: XPlayer! # validation error
}",
  ],
}
`;

exports[`query query keyword 1`] = `
Object {
  "contents": Array [
    "# Query is the root query object
type Query {
  node(id: String!): Node
  nodes(ids: [String!]): [Node]
  viewer: Viewer!
}",
  ],
}
`;
